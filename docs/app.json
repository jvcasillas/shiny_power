[{"name":"app.R","content":"library(\"shiny\") \nlibrary(\"ggplot2\") \nlibrary(\"datasets\")\nlibrary(\"bslib\")\n\ntheme <- bs_theme(\n  # Controls the default grayscale palette\n  bg = \"#fff\", fg = \"#202123\",\n  # Controls the accent (e.g., hyperlink, button, etc) colors\n  primary = \"#cc0033\", secondary = \"#48DAC6\",\n  base_font = c(\"Grandstander\", \"sans-serif\"),\n  code_font = c(\"Courier\", \"monospace\"),\n  heading_font = \"'Helvetica Neue', Helvetica, sans-serif\",\n  # Can also add lower-level customization\n  \"input-border-color\" = \"#cc0033\"\n)\n\nmyplot <- function(sigma, m1, m2, n, alpha) {\n  g <- ggplot(data.frame(mu = c(m1-sigma*2, m2+sigma*2)), aes(x = mu))\n  \n  g <- g + stat_function(\n    fun = dnorm, \n    geom = \"line\", \n    args = list(mean = m1, sd = sigma/sqrt(n)), \n    linewidth = .8, \n    col = rgb(0, 0, 204, 102, maxColorValue = 255)\n  )\n  \n  g <- g + stat_function(\n    fun = dnorm, \n    geom = \"line\", \n    args = list(mean = m2, sd = sigma/sqrt(n)), \n    linewidth = .8, \n    col = rgb(150, 0, 204, 102, maxColorValue = 255)\n  )\n  \n  xitc <- m1 + qnorm(1 - alpha) * sigma/sqrt(n)\n  \n  g <- g + geom_vline(xintercept = xitc, linewidth = .8) +\n  labs(title = NULL, x = NULL, y = NULL) + \n  theme_bw(base_family = \"Palatino\", base_size = 16)\n  \n  g\n}\n\n# Define UI for miles per gallon application\nui <- fluidPage(theme = theme,\n    \n    # Application title\n    titlePanel(\"Power/Sample size calculator\", windowTitle = \"Power\"),\n\n    sidebarLayout(\n        sidebarPanel(\n\n            #only show if calc = Sample size\n            conditionalPanel(\n                condition = \"input.calc == 'sample'\",\n                h4(\"Sample size calculator\"),\n                sliderInput(\"ssPower\", \"Desired power\", value = 0.80, \n                            min = 0.01, max = 1.0, step = 0.01),\n                numericInput(\"ssM1\", \"Group 1 mean:\", 50),\n                numericInput(\"ssM2\", \"Group 2 mean:\", 53),\n                numericInput(\"ssSigma\", \"Standard Deviation\", 4),\n                br(),\n                sliderInput(\"ssAlpha\", \"Alpha\", min = 0.01, max = 0.1, \n                            value = 0.05, step = 0.01)\n            ),\n            \n            conditionalPanel(\n                condition = \"input.calc == 'power'\",\n                h4(\"Power calculator\"),\n                sliderInput(\"pN\", \"Sample size:\", min = 1, max = 200, value = 15),\n                numericInput(\"pM1\", \"Mean 1 (pop. or group 1):\", 50, step = 0.25),\n                numericInput(\"pM2\", \"Mean 2 (sample or group 2):\", 53, step = 0.25),\n                numericInput(\"pSigma\", \"Standard Deviation\", 4.5, step = 0.1),\n                br(),\n                sliderInput(\"pAlpha\", \"Alpha\", min = 0.01, max = 0.1, value = 0.05, \n                    step = 0.01)\n            ),\n            \n            br(),\n            radioButtons(\"sample\", \"Samples\", list(\"one.sample\", \"two.sample\")),\n            radioButtons(\"side\", \"Sides\", list(\"one.sided\", \"two.sided\")),\n            p(strong(\"Created by:\"), \n              tags$a(\"Joseph V. Casillas\", href=\"http://www.jvcasillas.com\"),\n              br(), strong(\"Source code:\"), \n              tags$a(\"Github\", href=\"https://github.com/jvcasill/shiny_power/\"))\n        ),\n\n    mainPanel(\n        tabsetPanel(type = \"pills\", id = \"calc\",\n            tabPanel(title = \"Power\", value = \"power\",\n                fluidRow(\n                    column(4,\n                        h4(\"Summary\"),\n                        br(),br(),\n                        tableOutput(\"powerValues\")\n                    ),\n                    column(8,\n                        h4(\"Relationship between power, beta, and alpha\", align = 'center'),\n                        plotOutput(\"densityPlots\")\n                    )\n                )\n            ),\n            tabPanel(title = \"Sample size\", value = \"sample\",\n                h4(\"Summary\"),\n                br(),br(),\n                tableOutput(outputId = \"sampleValues\"))\n            )\n        )\n    )\n)\n\nserver <- function(input, output) {\n  \n  output$densityPlots <- renderPlot({\n    myplot(input$pSigma, input$pM1, input$pM2, input$pN, input$pAlpha)\n  })\n  \n  powerdf <- reactive({\n    powerSum <- power.t.test(\n      n = input$pN, \n      delta = (input$pM2 - input$pM1), \n      sd = input$pSigma, \n      type = input$sample, \n      alternative = input$side, \n      sig.level = input$pAlpha\n    )\n    \n    data.frame(\n      Statistic = c(\n        \"Sample size\",\n        \"Standard Deviation\",\n        \"Delta\",\n        \"Alpha\",\n        \"Power\"),\n      Value = c(\n        input$pN,\n        input$pSigma,\n        (input$pM2-input$pM1),\n        input$pAlpha,\n        powerSum$power),\n      stringsAsFactors = FALSE\n    )\n  })\n  \n  output$powerValues <- renderTable({\n    powerdf()\n  })\n  \n  sampledf <- reactive({\n    sampleSum <- power.t.test(\n      n = NULL,\n      power = input$ssPower,\n      delta = (input$ssM2 - input$ssM1), \n      sd = input$ssSigma, \n      type = input$sample, \n      alternative = input$side, \n      sig.level = input$ssAlpha\n    )\n    \n    data.frame(\n      Statistic = c(\n        \"Standard Deviation\",\n        \"Delta\",\n        \"Alpha\",\n        \"Desired power\",\n        \"Required sample size\"),\n      Value = c(\n        input$ssSigma,\n        (input$ssM2-input$ssM1),\n        input$ssAlpha,\n        input$ssPower,\n        sampleSum$n),\n      stringsAsFactors=FALSE)\n  })\n  \n  output$sampleValues <- renderTable({\n    sampledf()\n  })\n}\n\nshinyApp(ui = ui, server = server)\n","type":"text"}]
